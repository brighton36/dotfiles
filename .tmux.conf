############################################################################
# Reset Prefix
############################################################################
set -g prefix C-b
bind-key b send-prefix # for nested tmux sessions

############################################################################
# Global options
############################################################################
# large history
set-option -g history-limit 10000

# basic settings
set-window-option -g xterm-keys on # for vim
set-window-option -g mode-keys vi # vi key
set-window-option -g monitor-activity on

set-option -g status-position top

# Automatically set window title
setw -g automatic-rename

# use mouse # More on mouse support http://floriancrouzat.net/2010/07/run-tmux-with-mouse-support-in-mac-os-x-terminal-app/
#setw -g mode-mouse on
#setw -g mouse-resize-pane on
#set -g mouse-select-window on
#set -g mouse-select-pane on
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# vi movement keys
# set-option -g status-keys vi

############################################################################
# Status Bar
############################################################################
set-option -g status-justify right
set-option -g status-interval 5
set-option -g status-left-length 30
set-option -g visual-activity on

# Titles (window number, program name, active (or not)
set-option -g set-titles on
set-option -g set-titles-string '#H:#S.#I.#P #W #T'


############################################################################
# Unbindings
############################################################################
#unbind [ # copy mode bound to escape key
unbind j
unbind C-b # unbind default leader key
unbind '"' # unbind horizontal split
unbind %   # unbind vertical split


############################################################################
# Bindings
############################################################################
# reload tmux conf
bind-key r source-file ~/.tmux.conf

#bind Escape copy-mode

# new split in current pane (horizontal / vertical)
bind-key - split-window -v # split pane horizontally
bind-key \\ split-window -h # split pane vertically

# list panes
bind-key Space list-panes

# break-pane
bind-key Enter break-pane

# join-pane [-dhv] [-l size | -p percentage] [-s src-pane]
# [-t:dst-window.dst-pane] (destination window (dot) destination pane
#                (alias: joinp)
#
#bind C-j command-prompt "joinp"
#bind C-j command-prompt "join-pane"
#bind-key j command-prompt "join-pane -s '%%'"
#bind-key j command-prompt "joinp -t:0"
#bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split

#previous pane
#bind-key -n C-up prev
#bind-key -n C-left prev

#next pane
#bind-key -n C-right next
#bind-key -n C-down next

############################################################################
# windows
############################################################################
bind C-j previous-window
bind C-k next-window
bind-key C-a last-window # C-a C-a for last active window
bind A command-prompt "rename-window %%"
# By default, all windows in a session are constrained to the size of the 
# smallest client connected to that session, 
# even if both clients are looking at different windows. 
# It seems that in this particular case, Screen has the better default 
# where a window is only constrained in size if a smaller client 
# is actively looking at it.
setw -g aggressive-resize on

############################################################################
# panes
############################################################################
# Navigation ---------------------------------------------------------------
# use the vim motion keys to move between panes
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Resizing ---------------------------------------------------------------
bind-key C-h resize-pane -L
bind-key C-j resize-pane -D
bind-key C-k resize-pane -U
bind-key C-l resize-pane -R

############################################################################
# Copy and Paste
############################################################################
# use vim motion keys while in copy mode
bind P paste-buffer
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle

# This syncronizes our copy with the system buffer:
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "/usr/bin/xclip -i -f -selection primary | /usr/bin/xclip -i -selection clipboard"

############################################################################
# layouts
############################################################################
bind o select-layout "active-only"
bind M-- select-layout "even-vertical"
bind M-| select-layout "even-horizontal"
bind M-r rotate-window

############################################################################
# Colors
############################################################################
# To get the palette: 
# bash -c 'for i in {0..255}; do printf "\\x1b[38;5;${i}mcolour${i}\\x1b[0m\\n"; done'

# Status bar
set -g status-style "fg=colour7,bg=colour4"
set -g status-left ' ‚å®   #T#[default]'
set -g status-right-length 50
set -g status-right ' #[bg=colour9] ‚õÅ #[bold]#S #[nobold,bg=colour13] üíª #(hostname) #[bg=colour4] ‚è≤  %m-%d %R #[default]'

# message text
set -g message-style fg=colour09,bg=colour07 #orange and base02

# Pane Borders:
set -g pane-border-style fg=colour14
set -g pane-active-border-style fg=colour04

# clock
set -g clock-mode-colour colour02 #green

# bell
set -g window-status-bell-style fg=colour07,bg=colour01 #base02, red
